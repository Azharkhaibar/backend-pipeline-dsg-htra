import React, { ChangeEvent, FormEvent, useState } from "react";
import { ProductView } from "@/features/products/DisplayProductView";
import { DisplayProductInfo } from "@/components/ui/product/DisplayProductInfo";
import { Loader2, Plus, X } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from "@/components/ui/select";
import { ProductFormData } from "@/types/product";

interface FormField {
    label: string;
    name: keyof ProductFormData;
    type?: string;
    component?: "textarea";
    required?: boolean;
}

interface SelectField {
    label: string;
    name: "fkVendor" | "fkCategory";
    options: string[];
}

const DEFAULT_FORM_VALUES: ProductFormData = {
    namaProduk: "",
    warnaProduk: "",
    fotoProduk: "",
    deskripsiProduk: "",
    harga: 0,
    fkVendor: 0,
    fkCategory: 0,
    stok: 0,
    stok_minimum: 0,
    isManageStock: true,
};

const formFields: FormField[] = [
    { label: "Nama Produk", name: "namaProduk", required: true },
    { label: "Warna Produk", name: "warnaProduk", required: true },
    {
        label: "Deskripsi Produk",
        name: "deskripsiProduk",
        component: "textarea",
        required: true,
    },
    { label: "Harga", name: "harga", type: "number", required: true },
    { label: "Stok", name: "stok", type: "number", required: true },
    { label: "Stok Minimum", name: "stok_minimum", type: "number", required: true },
];

const selectFields: SelectField[] = [
    { label: "Vendor", name: "fkVendor", options: ["Vendor A", "Vendor B"] },
    { label: "Kategori", name: "fkCategory", options: ["Elektronik", "Fashion"] },
];

export default function ProductPage() {
    const [formData, setFormData] = useState<ProductFormData>(DEFAULT_FORM_VALUES);
    const [dialogOpen, setDialogOpen] = useState(false);
    const [loading, setLoading] = useState(false);
    const [categories, setCategories] = useState<{ id: number; namaKategori: string }[]>([]);
    const [vendors, setVendors] = useState<{ id: number; namaVendor: string }[]>([]);

    const [fotoFile, setFotoFile] = useState<File | null>(null);
    const [products, setProducts] = useState<ProductFormData[]>([]);

    const [uploading, setUploading] = useState(false);

    const resetForm = () => setFormData(DEFAULT_FORM_VALUES);

    React.useEffect(() => {
        fetch("/api/categories")
            .then(res => res.json())
            .then(data => setCategories(data));

        fetch("/api/vendors")
            .then(res => res.json())
            .then(data => setVendors(data));
    }, []);

    const handleChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormData((prev) => ({
            ...prev,
            [name]: e.target.type === "number" ? Number(value) : value,
        }));
    };

    const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {
        const file = e.target.files?.[0] ?? null;
        setFotoFile(file);

        if (file) {
            const previewUrl = URL.createObjectURL(file);
            setFormData((prev) => ({
                ...prev,
                fotoProduk: previewUrl,
            }));
        } else {
            setFormData((prev) => ({
                ...prev,
                fotoProduk: "",
            }));
        }
    };


    const handleSwitch = (checked: boolean) => {
        setFormData((prev) => ({ ...prev, isManageStock: checked }));
    };

    const handleSelect = (name: "fkVendor" | "fkCategory", value: string) => {
        setFormData(prev => ({
            ...prev,
            [name]: value === "0" ? 0 : Number(value),
        }));
    };




    const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        setLoading(true);

        try {
            // Jika fotoProduk berupa URL preview (string), dan kamu ingin kirim file asli,
            // kamu harus simpan File asli di state terpisah. Misal: fotoFile: File | null
            // Tapi jika hanya mengirim data string (misal nama file atau URL),
            // kamu bisa kirim langsung formData.

            // Contoh: pakai FormData untuk upload file + data lain
            const data = new FormData();
            data.append("namaProduk", formData.namaProduk);
            data.append("warnaProduk", formData.warnaProduk);
            data.append("deskripsiProduk", formData.deskripsiProduk);
            data.append("harga", formData.harga.toString());
            data.append("fkVendor", formData.fkVendor.toString());
            data.append("fkcategory", formData.fkCategory.toString());
            data.append("stok", formData.stok.toString());
            data.append("stok_minimum", formData.stok_minimum.toString());
            data.append("isManageStock", formData.isManageStock ? "1" : "0");

            // Contoh mengirim file asli (bila ada)
            if (fotoFile) {
                data.append("fotoProduk", fotoFile);
            }

            const response = await fetch("http://localhost:3000/product", {
                method: "POST",
                body: data,
            });

            if (!response.ok) {
                throw new Error("Failed to submit product");
            }

            const newProduct: ProductFormData = await response.json();

            // Update produk di UI
            setProducts((prev) => [...prev, newProduct]);

            setDialogOpen(false);
            resetForm();
        } catch (error) {
            console.error("Submit error:", error);
            alert("Gagal menyimpan produk. Silakan coba lagi.");
        } finally {
            setLoading(false);
        }
    };


    return (
        <div className="space-y-4">
            <div className="flex justify-between items-center">
                <h2 className="text-xl font-semibold">Products</h2>
                <Button variant="outline" size="icon" onClick={() => setDialogOpen(true)}>
                    <Plus className="h-4 w-4" />
                </Button>
            </div>

            <div className="flex gap-4">
                <DisplayProductInfo />
                <ProductView products={products} />
            </div>

            {dialogOpen && (
                <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
                    <div className="bg-white rounded-lg w-full max-w-md max-h-[90vh] overflow-y-auto">
                        <div className="flex justify-between items-center p-4 border-b sticky top-0 bg-white z-10">
                            <h3 className="text-lg font-semibold">Add Product</h3>
                            <Button
                                variant="ghost"
                                size="icon"
                                onClick={() => {
                                    setDialogOpen(false);
                                    resetForm();
                                }}
                            >
                                <X className="h-4 w-4" />
                            </Button>
                        </div>

                        <form onSubmit={handleSubmit} className="p-4 space-y-4">
                            {formFields.map((field) => (
                                <div key={field.name}>
                                    <Label>{field.label}</Label>
                                    {field.component === "textarea" ? (
                                        <Textarea
                                            name={field.name}
                                            value={formData[field.name] as string}
                                            onChange={handleChange}
                                            required={field.required}
                                        />
                                    ) : (
                                        <Input
                                            name={field.name}
                                            type={field.type}
                                            value={formData[field.name] as string | number}
                                            onChange={handleChange}
                                            required={field.required}
                                        />
                                    )}
                                </div>
                            ))}

                            <div>
                                <Label>Foto Produk</Label>
                                <Input
                                    type="file"
                                    name="fotoProduk"
                                    accept="image/*"
                                    onChange={handleFileChange}
                                    disabled={uploading}
                                />
                                {uploading && <p className="text-sm text-gray-500">Uploading...</p>}
                                {formData.fotoProduk && typeof formData.fotoProduk === "string" && (
                                    <img
                                        src={formData.fotoProduk}
                                        alt="Preview"
                                        className="mt-2 max-h-40 object-contain"
                                    />
                                )}

                            </div>

                            {selectFields.map((select) => (
                                <div key={select.name}>
                                    <Label>{select.label}</Label>
                                    <Select
                                        onValueChange={(val) => handleSelect("fkCategory", val)}
                                        value={formData.fkCategory ? formData.fkCategory.toString() : "0"}
                                    >
                                        <SelectTrigger>
                                            <SelectValue placeholder="Pilih Kategori" />
                                        </SelectTrigger>
                                        <SelectContent>
                                            <SelectItem value="0">-- Pilih Kategori --</SelectItem>
                                            {categories.map(cat => (
                                                <SelectItem key={cat.id} value={cat.id.toString()}>
                                                    {cat.namaKategori}
                                                </SelectItem>
                                            ))}
                                        </SelectContent>
                                    </Select>

                                </div>
                            ))}


                            <div className="flex items-center justify-between">
                                <Label>Manage Stok Otomatis?</Label>
                                <Switch checked={formData.isManageStock} onCheckedChange={handleSwitch} />
                            </div>

                            <Button type="submit" className="w-full" disabled={loading}>
                                {loading ? <Loader2 className="animate-spin w-4 h-4 mr-2" /> : "Simpan Produk"}
                            </Button>
                        </form>
                    </div>
                </div>
            )}
        </div>
    );
}

maksud gw ini kan gw mau post data product tapi yg di input vendor ama category product nya namaDoang sedangkan skema database drizzle saya gini

sc_product.ts

export const categoryTable = mysqlTable("category", {
  id: int("category_id").notNull().primaryKey().autoincrement(),
  namaKategori: varchar("nama_kategori", { length: 100 }).notNull(),
  deskripsiKategori: varchar("deskripsi_kategori", { length: 255 }),
});

export const productTable = mysqlTable("product", {
  id: int("product_id").primaryKey().autoincrement(),
  namaProduk: varchar("nama_produk", { length: 100 }).notNull(),
  warnaProduk: varchar("warna_produk", { length: 50 }),
  fotoProduk: varchar("foto_produk", { length: 255 }),
  deskripsiProduk: text("deskripsi_produk").notNull(),
  harga: decimal("harga", { precision: 10, scale: 2 }),  

  fkVendor: int("fk_vendor").references(() => vendorsTable.vendorId),
  fkCategory: int("fk_category").references(() => categoryTable.id),

  stok: int("stok"), // 🆕 dari ALTER TABLE
  stok_minimum: int("stok_minimum"), // 🆕 dari ALTER TABLE
  isManageStock: mysqlBoolean("isManageStock").default(true), // 🆕 dari ALTER TABLE

  created_at: timestamp("created_at")
    .notNull()
    .default(sqlCURRENT_TIMESTAMP),
  updated_at: timestamp("updated_at")
    .notNull()
    .default(sqlCURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP),
});

sc_vendor.ts

import { mysqlTable, varchar, text, timestamp, int } from "drizzle-orm/mysql-core";
import { sql } from "drizzle-orm";

export const vendorsTable = mysqlTable("vendors", {
  vendorId: int("vendor_id").notNull().primaryKey().autoincrement(),
  namaVendor: varchar("nama_vendor", { length: 100 }).notNull(),
  kontakEmail: varchar("kontak_email", { length: 100 }).notNull().unique(),
  kontakTelepon: varchar("kontak_telepon", { length: 20 }),
  address: text("address"),
  description: text("description"),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().onUpdateNow().notNull(),
});

gimana